<?php if ( ! defined( 'ABSPATH' ) ) {
	exit;} // Exit if accessed directly

require_once plugin_dir_path( __FILE__ ) . 'class-ovas-connect-api-fields.php';

class Ovas_Connect_Promises extends Ovas_Connect_api_Fields {
	protected $fields      = array(
		'promiseId'           => array(
			'validationInsert' => 'notAllowed',
			'validationUpdate' => 'notAllowed',
			'convertToDB'      => 'nullFLD',
			'convertFromDB'    => 'intFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'id',
			'required'         => false,
			'linkedTo'         => '',
			'linkhref'         => '',
		),
		'number'              => array(
			'validationInsert' => 'notAllowed',
			'validationUpdate' => 'notAllowed',
			'convertToDB'      => 'nullFLD',
			'convertFromDB'    => 'intFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'promisesnr',
			'required'         => false,
			'linkedTo'         => '',
			'linkhref'         => '',
		),
		'description'         => array(
			'validationInsert' => '',
			'validationUpdate' => '',
			'convertToDB'      => 'stringFLD',
			'convertFromDB'    => 'stringFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'description',
			'required'         => true,
			'linkedTo'         => '',
			'linkhref'         => '',
		),
		'amount'              => array(
			'validationInsert' => 'amountFLD',
			'validationUpdate' => 'amountFLD',
			'convertToDB'      => '',
			'convertFromDB'    => '',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'amount',
			'required'         => true,
			'linkedTo'         => '',
			'linkhref'         => '',
		),
		'mandateId'           => array(
			'validationInsert' => 'isNumeric,listItemExists',
			'validationUpdate' => 'isNumeric,listItemExists',
			'convertToDB'      => 'intFLD',
			'convertFromDB'    => 'intFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'id_mandate',
			'required'         => false,
			'linkedTo'         => '',
			'linkhref'         => '/relations/{relationId}/mandates',
		),
		'promisesPaymethodId' => array(
			'validationInsert' => 'isNumeric,listItemExists',
			'validationUpdate' => 'notAllowed',
			'convertToDB'      => 'intFLD',
			'convertFromDB'    => 'intFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'id_paymethod',
			'required'         => true,
			'linkedTo'         => '',
			'linkhref'         => '/promisespaymethods',
		),
		'promisesFrequencyId' => array(
			'validationInsert' => 'isNumeric,listItemExists',
			'validationUpdate' => 'isNumeric,listItemExists',
			'convertToDB'      => 'intFLD',
			'convertFromDB'    => 'intFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'id_frequency',
			'required'         => true,
			'linkedTo'         => '',
			'linkhref'         => '/promisesfrequencies',
		),
		'startDate'           => array(
			'validationInsert' => 'dateFLD',
			'validationUpdate' => 'dateFLD',
			'convertToDB'      => 'dateFLD',
			'convertFromDB'    => 'dateFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'startdate',
			'required'         => true,
			'linkedTo'         => '',
			'linkhref'         => '',
		),
		'endDate'             => array(
			'validationInsert' => 'dateFLD',
			'validationUpdate' => 'dateFLD',
			'convertToDB'      => 'dateFLD',
			'convertFromDB'    => 'dateFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'enddate',
			'required'         => false,
			'linkedTo'         => '',
			'linkhref'         => '',
		),
		'createdDate'         => array(
			'validationInsert' => 'dateFLD',
			'validationUpdate' => 'dateFLD',
			'convertToDB'      => 'dateFLD',
			'convertFromDB'    => 'dateFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'created',
			'required'         => true,
			'linkedTo'         => '',
			'linkhref'         => '',
		),
		'endedDate'           => array(
			'validationInsert' => 'dateFLD',
			'validationUpdate' => 'dateFLD',
			'convertToDB'      => 'dateFLD',
			'convertFromDB'    => 'dateFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'ended',
			'required'         => false,
			'linkedTo'         => '',
			'linkhref'         => '',
		),
		'bankaccount'         => array(
			'validationInsert' => '',
			'validationUpdate' => '',
			'convertToDB'      => 'stringFLD',
			'convertFromDB'    => 'stringFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'bankaccount',
			'required'         => false,
			'linkedTo'         => '',
			'linkhref'         => '',
		),
		'iban'                => array(
			'validationInsert' => 'ibanFLD',
			'validationUpdate' => 'ibanFLD',
			'convertToDB'      => 'stringFLD,uppercaseFLD',
			'convertFromDB'    => 'stringFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'iban',
			'required'         => false,
			'linkedTo'         => '',
			'linkhref'         => '',
		),
		'bic'                 => array(
			'validationInsert' => '',
			'validationUpdate' => '',
			'convertToDB'      => 'stringFLD,uppercaseFLD',
			'convertFromDB'    => 'stringFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'bic',
			'required'         => false,
			'linkedTo'         => '',
			'linkhref'         => '',
		),
		'ledgerId'            => array(
			'validationInsert' => 'isNumeric,listItemExists',
			'validationUpdate' => 'isNumeric,listItemExists',
			'convertToDB'      => 'intFLD',
			'convertFromDB'    => 'intFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'id_gb',
			'required'         => true,
			'linkedTo'         => '',
			'linkhref'         => '/ledgers',
		),
		'costtypeId'          => array(
			'validationInsert' => 'isNumeric,listItemExists',
			'validationUpdate' => 'isNumeric,listItemExists',
			'convertToDB'      => 'intFLD',
			'convertFromDB'    => 'intFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'id_kpl',
			'required'         => false,
			'linkedTo'         => '',
			'linkhref'         => '/costtypes',
		),
		'responseId'          => array(
			'validationInsert' => 'isNumeric,listItemExists',
			'validationUpdate' => 'isNumeric,listItemExists',
			'convertToDB'      => 'intFLD',
			'convertFromDB'    => 'intFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'id_response',
			'required'         => false,
			'linkedTo'         => '',
			'linkhref'         => '/responses',
		),
		'notes'               => array(
			'validationInsert' => '',
			'validationUpdate' => '',
			'convertToDB'      => 'stringFLD',
			'convertFromDB'    => 'stringFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'notes',
			'required'         => false,
			'linkedTo'         => '',
			'linkhref'         => '',
		),
		'invoiceId'           => array(
			'validationInsert' => 'isNumeric,listItemExists',
			'validationUpdate' => 'notAllowed',
			'convertToDB'      => 'intFLD',
			'convertFromDB'    => 'intFLD',
			'databaseTable'    => 'tbl_promises',
			'databaseColumn'   => 'id_verkoop',
			'required'         => false,
			'linkedTo'         => '',
			'linkhref'         => '/relations/{relationId}/invoices',
		),
	);
	public $uri            = array(
		'GET'    => '/relations/{relationId}/promises/{id}',
		'POST'   => '/relations/{relationId}/promises/',
		'PUT'    => '/relations/{relationId}/promises/{id}',
		'DELETE' => '/relations/{relationId}/promises/{id}',
	);
	public $name           = 'Promises';
	public $label          = 'Promises';
	public $order          = 40;
	protected $returnField = 'promiseId';

	// Hardcoded string needed for WP translation
	public function getLabel() {
		return __( 'Promises', 'ovas-connect' );
	}
}
